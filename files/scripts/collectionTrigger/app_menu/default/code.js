"/**\n *  Requires\n */\n\nvar Corus \t= require('corus'),\n    menu\t= require('/custom_modules/menu'),\n\tlang \t= req.query.lang || req.headers.lang || req.cookies.lang || null,\n\tcorus \t= new Corus({host: process.env.HOST, key: process.env.KEY, avoidTrigger: true, lang: req.query.lang || null}),\n\tuserIsAdmin = (req.user && (req.user.isOwner || (['manager', 'developer'].indexOf(req.user.role) !== -1))),\n\tisFileDownload = (req.method === 'GET' && req.params.field),\n    field\t= null;\n\n\n/**\n * Field Info\n * (informed on \"lookup fields\" calls)\n */\n\nif(req.query.field){\n\n    try { field = JSON.parse(req.query.field); } catch(e) { /* Invalid JSON */ }\n    console.log(JSON.stringify(field));\n\n}\n\n/**\n * Shortcut Params\n * (informed on \"shortcut\" calls)\n */\n\nvar shortcutParams = null;\n\nif(req.query.params){\n\n    try { shortcutParams = JSON.parse(req.query.params); } catch(e) { /* Invalid JSON */ }\n\n}\n\nif (!userIsAdmin && !isFileDownload){\n\n    next({statusCode: 403, message: 'Only managers and developers can access this collection'});\n\n} else {\n\n    if(req.method === 'GET'){\n\n        /**\n         * GET\n         */\n\n        if(!req.params.id){\n\n            /**\n             * GET ==> /data\n             */\n\n            /**\n             * Filter\n             *\n             *  - where:    (JSON) Represents a mongodb query (can be null).\n             *  - skip:     (Integer) Number of records to skip (can be null, default value: 0).\n             *  - limit:    (Integer) Number of records to return (can be null, default value: 20).\n             *  - count:    (Boolean) If true, query returns total number of records matching the specified criteria.\n             *  - search:   (String) Full-text search value\n             *  - order:    (String) Delimited list of path names (Ex: field1, -field2, field3). Default: -createdOn\n             *  - groupBy:  (JSON) Aggregation expression ($group value of mongodb aggregation pipeline)\n             */\n            \n            if(!req.filter.where){\n             \t\n                req.filter.where = {};\n                \n            }\n            \n            //Aplicamos el orden por defecto\n            \n            req.filter.order = 'order';\n            \n            //Si consultan la colecciÃ³n desde un lookup\n            \n            if(field){\n                \n                if (field.collection === 'static_entries'){\n                    req.filter.where.type = 'static';\n                } else if (field.collection === 'static_list_entries'){\n                    req.filter.where.type = 'static_list';\n                } else if (field.collection === 'calendar_entries'){\n                    req.filter.where.type = 'calendar';\n                } else if (field.collection === 'news_entries'){\n                    req.filter.where.type = 'news';\n                } else if (field.collection === 'news_categories'){\n                    req.filter.where.type = 'news';\n                } else if (field.collection === 'notifications'){\n                    req.filter.where.type = 'notifications';\n                } else if (field.collection === 'directory_entries'){\n                    req.filter.where.type = 'directory';\n                } else if (field.collection === 'surveys_entries'){\n                    req.filter.where.type = 'survey';\n                } else if (field.collection === 'videos_entries'){\n                    req.filter.where.type = 'videos';\n                }\n                \n            }\n            \n            //Si consultan la app desde un shortcut\n            \n            if(shortcutParams && shortcutParams.app){\n             \t\n                req.filter.where.app = shortcutParams.app;\n                \n            }\n            \n            \n            corus.apps(process.env.APP).collections(req.params.collection).data().get(req.filter, function(err, result){\n\n                next(err, result);\n\n            }); \n\n        } else {\n\n            if(!req.params.field) {\n\n                /**\n                 * GET ==> /data/:id\n                 */\n\n                corus.apps(process.env.APP).collections(req.params.collection).data(req.params.id).get(function (err, result) {\n\n                    next(err, result);\n\n                });\n\n            } else {\n\n                /**\n                 * GET ==> /data/:id/:field (file download)\n                 */\n\n                next(null);\n\n            }\n\n        }\n\n    } else if(req.method === 'POST'){\n\n        /**\n         * POST\n         */\n\n        corus.apps(process.env.APP).collections(req.params.collection).data().post(JSON.parse(req.body), function(err, result){\n\n            next(err, result);\n\n        });\n\n    } else if(req.method === 'PUT'){\n\n        /**\n         * PUT\n         */\n\n        corus.apps(process.env.APP).collections(req.params.collection).data(req.params.id).put(JSON.parse(req.body), function(err, result){\n\n            if(err && err.statusCode === 404 && req.query.ignore404){\n\n                err = null;\n\n            }\n\n            next(err, result);\n\n        });\n\n    } else if(req.method === 'DELETE'){\n\n        /**\n         * DELETE\n         */\n\n        corus.apps(process.env.APP).collections(req.params.collection).data(req.params.id).delete(function(err, result){\n\n            next(err, result);\n\n        });\n\n    } else {\n\n        next({statusCode: 400, message: 'Invalid http verb'});\n\n    }\n\n}"
