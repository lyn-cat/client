"/**\n *  Requires\n */\n\nvar Corus = require('corus');\nvar menu = require('/custom_modules/menu');\nvar notification = require('/custom_modules/notification');\n\n/**\n * Request and Response\n *\n * - req:   A Node.js request object (http.ClientRequest)\n * - res:   A Node.js response object (http.ClientResponse)\n * - next:  Like \"next\" connect/express function: next(err, result)\n */\n\n/**\n * Execution Environment:\n *\n *  - process.env.HOST:     The host where this script is running.\n *  - process.env.APP:      The slug of the app that contains this trigger.\n *  - process.env.USER:     The email of the user who is invoking this script.\n *  - process.env.KEY:      The key to impersonate a \"developer\" user on this app.\n */\n\n/**\n * Request Parameters:\n *\n *  - req.user:                    (JSON) JSON representing the user who invokes the script.\n *  - req.filter:                  (JSON) JSON representing the filter to apply (can be null).\n *  - req.query:                   (JSON) Query String object\n *  - req.params.collection:       (String) Slug of the collection attached to this trigger.\n *  - req.params.id:               (String) Id of the item involved (can be null).\n *  - req.params.field:            (String) Name of the field (only informed on \"file\" operations)\n */\n\n/**\n *  Corus Client\n */\n\nvar corus = new Corus({host: process.env.HOST, key: process.env.KEY, avoidTrigger: true, lang: req.query.lang || null});\n\n/**\n * Private Properties\n */\n\nvar userIsAdmin = (req.user && (req.user.isOwner || (['manager', 'developer'].indexOf(req.user.role) !== -1)));\n\nvar isFileDownload = (req.method === 'GET' && req.params.field);\n\n/**\n * Field Info\n * (informed on \"lookup fields\" calls)\n */\n\nvar field = null;\n\nif(req.query.field){\n\n    try { field = JSON.parse(req.query.field); } catch(e) { /* Invalid JSON */ }\n\n}\n\n/**\n * Shortcut Params\n * (informed on \"shortcut\" calls)\n */\n\nvar shortcutParams = null;\n\nif(req.query.params){\n\n    try { shortcutParams = JSON.parse(req.query.params); } catch(e) { /* Invalid JSON */ }\n\n}\n\n/**\n * Trigger Code\n */\n\n\nif(!userIsAdmin && !isFileDownload){\n\n    /**\n     *  Check Permissions\n     */\n\n    next({statusCode: 403, message: 'Only managers and developers can access this collection'});\n\n} else {\n\n    if(req.method === 'GET'){\n\n        /**\n         * GET\n         */\n\n        if(!req.params.id){\n\n            /**\n             * GET ==> /data\n             */\n\n            /**\n             * Filter\n             *\n             *  - where:    (JSON) Represents a mongodb query (can be null).\n             *  - skip:     (Integer) Number of records to skip (can be null, default value: 0).\n             *  - limit:    (Integer) Number of records to return (can be null, default value: 20).\n             *  - count:    (Boolean) If true, query returns total number of records matching the specified criteria.\n             *  - search:   (String) Full-text search value\n             *  - order:    (String) Delimited list of path names (Ex: field1, -field2, field3). Default: -createdOn\n             *  - groupBy:  (JSON) Aggregation expression ($group value of mongodb aggregation pipeline)\n             */\n            \n            menu.setAppFilter(corus, shortcutParams ? shortcutParams.app : null, req.filter, function(err, ids){\n               \n                if(err){\n                 \t\n                    next(err);\n                    \n                } else {\n                    \n                    corus.apps(process.env.APP).collections(req.params.collection).data().get(req.filter, function(err, result){\n\n                        next(err, result);\n\n                    });\n                    \n                }\n                \n            });\n            \n        } else {\n\n            if(!req.params.field) {\n\n                /**\n                 * GET ==> /data/:id\n                 */\n\n                corus.apps(process.env.APP).collections(req.params.collection).data(req.params.id).get(function (err, result) {\n\n                    next(err, result);\n\n                });\n\n            } else {\n\n                /**\n                 * GET ==> /data/:id/:field (file download)\n                 */\n\n                next(null);\n\n            }\n\n        }\n\n    } else if(req.method === 'POST'){\n\n        /**\n         * POST\n         */\n\n        var notificationJson = JSON.parse(req.body);\n        \n        notification.process(corus, notificationJson, function(err, notificationJson){\n        \n            if(err){\n             \t\n                next(err);\n                \n            } else {\n             \t\n                corus.apps(process.env.APP).collections(req.params.collection).data().post(notificationJson, function(err, result){\n\n                    next(err, result);\n\n                });\n                \n            }\n            \n        });\n\n    } else if(req.method === 'PUT'){\n\n        /**\n         * PUT\n         */\n        \n        var notificationJson = JSON.parse(req.body);\n        \n        notification.process(corus, notificationJson, function(err, notificationJson){\n        \n            if(err){\n             \t\n                next(err);\n                \n            } else {\n             \t\n                corus.apps(process.env.APP).collections(req.params.collection).data(req.params.id).put(notificationJson, function(err, result){\n\n                    if(err && err.statusCode === 404 && req.query.ignore404){\n\n                        err = null;\n\n                    }\n\n                    next(err, result);\n\n                });\n                \n            }\n            \n        });\n\n    } else if(req.method === 'DELETE'){\n\n        /**\n         * DELETE\n         */\n\n        corus.apps(process.env.APP).collections(req.params.collection).data(req.params.id).delete(function(err, result){\n\n            next(err, result);\n\n        });\n\n    } else {\n\n        /**\n         * Invalid verb!\n         */\n\n        next({statusCode: 400, message: 'Invalid http verb'});\n\n    }\n\n}"
