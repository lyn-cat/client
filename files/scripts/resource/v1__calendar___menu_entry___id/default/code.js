"/*\n * REST Resource: v1/calendar/:menu_entry/:id\n *\n * URL for this resource: http://lyncat.corus.io/custom/dev_lyncat/v1/calendar/:menu_entry/:id\n *\n */\n\nvar Corus \t\t\t\t= require('corus'),\n    async\t\t\t\t= require('async'),\n    moment\t\t\t\t= require('moment'),\n\tlang \t\t\t\t= null,\n\tcorus \t\t\t\t= new Corus({host: process.env.HOST, key: process.env.KEY, avoidTrigger: true, lang: lang, fillWithDefaultLang: true}),\n    jsonBody;\n\n\n\nif (req.method === 'GET') {\n\n    next(null, {});\n\n} else if(req.method === 'POST') {\n\n    jsonBody = JSON.parse(req.body);\n        \n    async.waterfall(\n        [\n            function(icallback) {\n\n                var filter = {\n                        where: \t\t{\n                            device:\t\treq.headers.device,\n                            parent:\t\treq.params.id\n                        },\n                        count:\t\tfalse\n                    };\n\n                // Check if the user has already rated this content\n                corus.apps(process.env.APP).collections('calendar_entries_rating').data().get(filter, function(err, result){\n\t\t\t\t\tif (!err && result.array.length > 0){\n                        icallback('Already rated.');\n                    } else {\n                        icallback(err);\n                    }\n                });\n\n            },\n            function(icallback) {\n                \n                var entry = {\n                        device:\t\treq.headers.device,\n                        parent:\t\treq.params.id,\n                    \trating:\t\tjsonBody.rating\n                \t};\n\n                // We save the content rating\n                corus.apps(process.env.APP).collections('calendar_entries_rating').data().post(entry, function(err, item){\n                    icallback(err);\n                });\n\n            },\n            function(icallback) {\n\n                // Update the rating results\n                require('/custom_modules/calendar').updateEntryRating(corus, req.params.id, function(err){\n                    icallback(err);\n                });\n\n            }\n        ],\n        function(error){\n            next(error);\n        }\n    );\n\n} else {\n\n    next({statusCode: 400, message: 'Invalid HTTP verb: ' + req.method});\n\n}\n\n"
