"/*\n * Module: surveys\n *\n * Example of custom_module require:\n *\n * var surveys = require('/custom_modules/surveys');\n *\n */\n\nvar async = require('async');\n\n\n\nexports.updateQuestionResults = function(corus, question, callback){\n\n    async.waterfall(\n        [\n            function(icallback){\n                \n                var question_filter = {\n                        where: \t\t{\n                            question: question\n                        },\n                        limit:\t\t1000000000,\n                        count:\t\tfalse\n\t                };\n\n                // Cerquem la pregunta sobre la que s'ha variat el resultat\n                corus.apps(process.env.APP).collections('surveys_results').data().get(question_filter, function(err, result){\n                    icallback(err, result.array);\n                });\n\n            },\n            function(question_results, icallback){\n\n                var average = 0,\n                    total = 0;\n\n                if (question_results && question_results.length > 0){\n                    \n                    question_results.forEach(function(vote){\n                        total = total + parseInt(vote.rating, 10);\n                    });\n\n                    average = total / question_results.length;\n                    \n                }\n\n                icallback(null, average, question_results.length);\n\n            },\n            function(average, total_votes, icallback){\n\n                // Guardem la mitja a la pregunta\n                corus.apps(process.env.APP).collections('surveys_questions').data(question).put({ average_rating: average }, function(err, item){\n\t\t\t\t\ticallback(err, average, total_votes);\n                });\n\n            }\n        ],\n        function(error, average, total_votes){\n            \n            if (callback && typeof(callback) === 'function'){\n\t            callback(error, average, total_votes);\n            }\n\n        }\n    );\n\n};\n\nexports.updateSurveyResults = function(corus, survey, callback){\n\n    async.waterfall(\n        [\n            function(icallback){\n                \n                var survey_filter = {\n                        where: \t\t{\n                            parent: survey\n                        },\n                        limit:\t\t100,\n                        count:\t\tfalse\n\t                };\n\n                // Cerquem les preguntes de l'enquesta\n                corus.apps(process.env.APP).collections('surveys_questions').data().get(survey_filter, function(err, result){\n                    icallback(err, result.array);\n                });\n\n            },\n            function(questions, icallback){\n\n                var average \t\t\t= 0,\n                    total_questions \t= 0,\n                    total_votes\t\t\t= 0,\n                    total \t\t\t\t= 0;\n\n                if (questions && questions.length > 0){\n                    \n                    total_questions = questions.length;\n                    \n                    async.whilst(\n                        function () { return questions.length > 0; },\n                        function (jcallback) {\n                            \n                            var q = questions.shift();\n                            \n\t\t\t\t\t\t\texports.updateQuestionResults(corus, q.id, function(err, question_average, question_votes){\n                                \n                                total = total + question_average;\n                                \n                                if (question_votes > total_votes){\n                                    total_votes = question_votes;\n                                }\n                                \n                                jcallback(err);\n                                \n                            });\n\n                        },\n                        function (err) {\n                            \n                            if (!err){\n                                average = total / total_questions;\n                            }\n                            \n                            icallback(err, average, total_votes);\n                        }\n                    );\n                    \n                } else {\n                    icallback(null, 0, 0);\n                }\n\n            },\n            function(average, total_votes, icallback){\n\n                // Guardem la mitja a l'enquesta\n                corus.apps(process.env.APP).collections('surveys_entries').data(survey).put({ average_rating: average, total_votes: total_votes }, function(err, item){\n\t\t\t\t\ticallback(err, average);\n                });\n\n            }\n        ],\n        function(error, average){\n            \n            if (callback && typeof(callback) === 'function'){\n\t            callback(error, average);\n            }\n\n        }\n    );\n\n};"
